| 07-01 16:50:31 [0.0, 0.015625, 0.03125, 0.046875, 0.0625, 0.078125, 0.09375, 0.109375, 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375, 0.25, 0.265625, 0.28125, 0.296875, 0.3125, 0.328125, 0.34375, 0.359375, 0.375, 0.390625, 0.40625, 0.421875, 0.4375, 0.453125, 0.46875, 0.484375, 0.5], 0.0
| 07-01 16:50:32 epoch: 000| time: 1.0s| train loss: +1.219e+01 | test loss: +nan |
| 07-01 16:50:32 epoch: 000| train loss i: nan test loss i: nan |
/itet-stor/khaefeli/net_scratch/conda_envs/SPECTRE/lib/python3.9/site-packages/torch/optim/lr_scheduler.py:154: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
/itet-stor/khaefeli/net_scratch/conda_envs/SPECTRE/lib/python3.9/site-packages/numpy/core/fromnumeric.py:3440: RuntimeWarning: Mean of empty slice.
  return _methods._mean(a, axis=axis, dtype=dtype,
/itet-stor/khaefeli/net_scratch/conda_envs/SPECTRE/lib/python3.9/site-packages/numpy/core/_methods.py:189: RuntimeWarning: invalid value encountered in double_scalars
  ret = ret.dtype.type(ret / rcount)
| 07-01 16:50:32 epoch: 001| time: 0.5s| train loss: +1.065e+01 | test loss: +nan |
| 07-01 16:50:32 epoch: 001| train loss i: nan test loss i: nan |
| 07-01 16:50:33 epoch: 002| time: 0.5s| train loss: +9.446e+00 | test loss: +nan |
| 07-01 16:50:33 epoch: 002| train loss i: nan test loss i: nan |
| 07-01 16:50:33 epoch: 003| time: 0.5s| train loss: +8.353e+00 | test loss: +nan |
| 07-01 16:50:33 epoch: 003| train loss i: nan test loss i: nan |
| 07-01 16:50:34 epoch: 004| time: 0.5s| train loss: +7.230e+00 | test loss: +nan |
| 07-01 16:50:34 epoch: 004| train loss i: nan test loss i: nan |
| 07-01 16:50:35 epoch: 005| time: 0.5s| train loss: +6.161e+00 | test loss: +nan |
| 07-01 16:50:35 epoch: 005| train loss i: nan test loss i: nan |
| 07-01 16:50:35 epoch: 006| time: 0.5s| train loss: +5.127e+00 | test loss: +nan |
| 07-01 16:50:35 epoch: 006| train loss i: nan test loss i: nan |
| 07-01 16:50:36 epoch: 007| time: 0.5s| train loss: +4.229e+00 | test loss: +nan |
| 07-01 16:50:36 epoch: 007| train loss i: nan test loss i: nan |
| 07-01 16:50:36 epoch: 008| time: 0.5s| train loss: +3.490e+00 | test loss: +nan |
| 07-01 16:50:36 epoch: 008| train loss i: nan test loss i: nan |
| 07-01 16:50:37 epoch: 009| time: 0.5s| train loss: +2.870e+00 | test loss: +nan |
| 07-01 16:50:37 epoch: 009| train loss i: nan test loss i: nan |
| 07-01 16:50:37 epoch: 010| time: 0.5s| train loss: +2.457e+00 | test loss: +nan |
| 07-01 16:50:37 epoch: 010| train loss i: nan test loss i: nan |
| 07-01 16:50:38 epoch: 011| time: 0.5s| train loss: +2.121e+00 | test loss: +nan |
| 07-01 16:50:38 epoch: 011| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 16:50:38 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.911494
{'degree': 0.0339706896994989}
Time computing clustering mmd:  0:00:55.107171
{'degree': 0.0339706896994989, 'cluster': 0.259400176467151}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[2.07332296 2.91616295 1.45808148 0.50201801 3.01599164 3.01599164
 1.86768285 0.62256095 0.48173476 0.59704016 1.19408032 0.59704016
 0.2129101  0.2129101  0.02487408]
-------------------------
{'degree': 0.0339706896994989, 'cluster': 0.259400176467151, 'orbit': 0.026539066928104482}
| 07-01 16:52:18 MMD_full ego_18_small.pth 128: {'degree': 0.0339706896994989, 'cluster': 0.259400176467151, 'orbit': 0.026539066928104482}
| 07-01 16:52:18 load dataset: ego_small
200
3
2
| 07-01 16:52:18 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.656704
{'degree': 0.05166899025472782}
Time computing clustering mmd:  0:00:32.360060
{'degree': 0.05166899025472782, 'cluster': 0.25072011844507647}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[2.16458812 3.37895465 1.68947732 0.67173721 3.99804632 3.99804632
 2.38764829 0.79588276 0.84283342 0.9533229  1.9066458  0.9533229
 0.44181711 0.44181711 0.07818354]
-------------------------
{'degree': 0.05166899025472782, 'cluster': 0.25072011844507647, 'orbit': 0.05121195351322916}
| 07-01 16:53:29 MMD_full ego_18_small.pth 128: {'degree': 0.05166899025472782, 'cluster': 0.25072011844507647, 'orbit': 0.05121195351322916}
| 07-01 16:53:29 load dataset: ego_small
200
3
2
| 07-01 16:53:29 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.846010
{'degree': 0.0505025256402869}
Time computing clustering mmd:  0:00:32.247652
{'degree': 0.0505025256402869, 'cluster': 0.23806806861549834}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[2.10057259 3.05032319 1.52516159 0.59567457 3.55695237 3.55695237
 2.03594158 0.67864719 0.61228279 0.72003004 1.44006009 0.72003004
 0.30504088 0.30504088 0.05483868]
-------------------------
{'degree': 0.0505025256402869, 'cluster': 0.23806806861549834, 'orbit': 0.0568142880391207}
| 07-01 16:54:40 MMD_full ego_18_small.pth 128: {'degree': 0.0505025256402869, 'cluster': 0.23806806861549834, 'orbit': 0.0568142880391207}
| 07-01 16:54:40 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 16:54:40 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.845062
{'degree': 0.06587849754432562}
Time computing clustering mmd:  0:00:32.065752
{'degree': 0.06587849754432562, 'cluster': 0.23021205238107528}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[2.04221462 2.91036437 1.45518219 0.56476403 3.33656111 3.33656111
 2.12735166 0.70911722 0.59749962 0.732374   1.464748   0.732374
 0.32871083 0.32871083 0.05630283]
-------------------------
{'degree': 0.06587849754432562, 'cluster': 0.23021205238107528, 'orbit': 0.05257850515757645}
| 07-01 16:55:51 MMD_full ego_18_small.pth 128: {'degree': 0.06587849754432562, 'cluster': 0.23021205238107528, 'orbit': 0.05257850515757645}
| 07-01 16:55:51 epoch: 012| time: 0.5s| train loss: +1.912e+00 | test loss: +nan |
| 07-01 16:55:51 epoch: 012| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 16:55:52 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.812837
{'degree': 0.06569366254892373}
Time computing clustering mmd:  0:00:54.738416
{'degree': 0.06569366254892373, 'cluster': 0.2450952366212451}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[1.9002397  2.39289033 1.19644516 0.45952963 2.43081797 2.43081797
 1.35684336 0.45228112 0.42152281 0.51988521 1.03977041 0.51988521
 0.2495542  0.2495542  0.04710625]
-------------------------
{'degree': 0.06569366254892373, 'cluster': 0.2450952366212451, 'orbit': 0.024442930558431053}
| 07-01 16:57:30 MMD_full ego_18_small.pth 128: {'degree': 0.06569366254892373, 'cluster': 0.2450952366212451, 'orbit': 0.024442930558431053}
| 07-01 16:57:30 load dataset: ego_small
200
3
2
| 07-01 16:57:30 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.679835
{'degree': 0.06600883342674835}
Time computing clustering mmd:  0:00:32.327365
{'degree': 0.06600883342674835, 'cluster': 0.251676322557589}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.96212605 2.55618162 1.27809081 0.45826368 2.37428682 2.37428682
 1.50834416 0.50278139 0.36691867 0.51471637 1.02943274 0.51471637
 0.21063039 0.21063039 0.02971248]
-------------------------
{'degree': 0.06600883342674835, 'cluster': 0.251676322557589, 'orbit': 0.05810868870473396}
| 07-01 16:58:41 MMD_full ego_18_small.pth 128: {'degree': 0.06600883342674835, 'cluster': 0.251676322557589, 'orbit': 0.05810868870473396}
| 07-01 16:58:41 load dataset: ego_small
200
3
2
| 07-01 16:58:41 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.681127
{'degree': 0.09769088968981166}
Time computing clustering mmd:  0:00:31.848461
{'degree': 0.09769088968981166, 'cluster': 0.24350733386932583}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.91267397 2.43596623 1.21798311 0.50175672 2.69630868 2.69630868
 1.46578063 0.48859354 0.50885365 0.59854202 1.19708404 0.59854202
 0.32580109 0.32580109 0.05037315]
-------------------------
{'degree': 0.09769088968981166, 'cluster': 0.24350733386932583, 'orbit': 0.05726570108698481}
| 07-01 16:59:52 MMD_full ego_18_small.pth 128: {'degree': 0.09769088968981166, 'cluster': 0.24350733386932583, 'orbit': 0.05726570108698481}
| 07-01 16:59:52 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 16:59:52 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.714188
{'degree': 0.07855063207640844}
Time computing clustering mmd:  0:00:32.179622
{'degree': 0.07855063207640844, 'cluster': 0.2265403492196117}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.19266761 3.07121739 1.5356087  1.35831668 0.97967865 0.97967865
 3.34377331 1.1145911  0.09166667 1.08603397 2.17206793 1.08603397
 0.88402098 0.88402098 0.30242424]
...
[1.90736106 2.65085919 1.3254296  0.7288552  2.82744019 2.82744019
 1.51878705 0.50626235 0.66091221 0.84143835 1.6828767  0.84143835
 0.50632545 0.50632545 0.10608997]
-------------------------
{'degree': 0.07855063207640844, 'cluster': 0.2265403492196117, 'orbit': 0.011085238602220437}
| 07-01 17:01:02 MMD_full ego_18_small.pth 128: {'degree': 0.07855063207640844, 'cluster': 0.2265403492196117, 'orbit': 0.011085238602220437}
| 07-01 17:01:03 epoch: 013| time: 0.5s| train loss: +1.771e+00 | test loss: +nan |
| 07-01 17:01:03 epoch: 013| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:01:03 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.849394
{'degree': 0.07620537054837229}
Time computing clustering mmd:  0:00:55.055285
{'degree': 0.07620537054837229, 'cluster': 0.16059359850671578}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[2.17264638 3.53470997 1.76735498 1.07983865 2.5100423  2.5100423
 4.20619234 1.40206411 1.52950986 1.15743748 2.31487496 1.15743748
 1.29804244 1.29804244 0.37543625]
-------------------------
{'degree': 0.07620537054837229, 'cluster': 0.16059359850671578, 'orbit': 0.014424298173498329}
| 07-01 17:02:42 MMD_full ego_18_small.pth 128: {'degree': 0.07620537054837229, 'cluster': 0.16059359850671578, 'orbit': 0.014424298173498329}
| 07-01 17:02:42 load dataset: ego_small
200
3
2
| 07-01 17:02:42 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.711908
{'degree': 0.10213597474640834}
Time computing clustering mmd:  0:00:31.880462
{'degree': 0.10213597474640834, 'cluster': 0.2810624301374409}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.82189295 2.07052102 1.03526051 0.3724623  1.81048942 1.81048942
 1.19822625 0.39940875 0.33738059 0.33941133 0.67882265 0.33941133
 0.1631928  0.1631928  0.03757666]
-------------------------
{'degree': 0.10213597474640834, 'cluster': 0.2810624301374409, 'orbit': 0.06077563370840755}
| 07-01 17:03:52 MMD_full ego_18_small.pth 128: {'degree': 0.10213597474640834, 'cluster': 0.2810624301374409, 'orbit': 0.06077563370840755}
| 07-01 17:03:52 load dataset: ego_small
200
3
2
| 07-01 17:03:53 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.739807
{'degree': 0.10127583167517473}
Time computing clustering mmd:  0:00:32.634299
{'degree': 0.10127583167517473, 'cluster': 0.23190831695685393}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.90254117 2.33053705 1.16526852 0.49789485 2.48223604 2.48223604
 1.28361846 0.42787282 0.40411864 0.59922165 1.1984433  0.59922165
 0.27624596 0.27624596 0.05501173]
-------------------------
{'degree': 0.10127583167517473, 'cluster': 0.23190831695685393, 'orbit': 0.058669263032720576}
| 07-01 17:05:04 MMD_full ego_18_small.pth 128: {'degree': 0.10127583167517473, 'cluster': 0.23190831695685393, 'orbit': 0.058669263032720576}
| 07-01 17:05:04 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:05:04 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.788328
{'degree': 0.06719170709626798}
Time computing clustering mmd:  0:00:32.044784
{'degree': 0.06719170709626798, 'cluster': 0.23631048213557393}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 3.04761233  6.5293902   3.2646951   2.3570193   1.05782638  1.05782638
 13.11551037  4.37183679  1.64035088  2.30423086  4.60846171  2.30423086
  2.53290043  2.53290043  0.81508316]
...
[2.22195546 3.58474954 1.79237477 1.09825453 2.94340758 2.94340758
 3.69634465 1.23211488 0.77465396 1.13685753 2.27371505 1.13685753
 0.7854832  0.7854832  0.24295013]
-------------------------
{'degree': 0.06719170709626798, 'cluster': 0.23631048213557393, 'orbit': 0.05758035486964608}
| 07-01 17:06:14 MMD_full ego_18_small.pth 128: {'degree': 0.06719170709626798, 'cluster': 0.23631048213557393, 'orbit': 0.05758035486964608}
| 07-01 17:06:15 epoch: 014| time: 0.5s| train loss: +1.706e+00 | test loss: +nan |
| 07-01 17:06:15 epoch: 014| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:06:15 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.647837
{'degree': 0.11847780849885403}
Time computing clustering mmd:  0:00:55.173674
{'degree': 0.11847780849885403, 'cluster': 0.22980444119400012}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[2.09571595 3.62323574 1.81161787 0.73054327 1.39714176 1.39714176
 8.2889766  2.7629922  0.68759237 0.82522608 1.65045217 0.82522608
 0.70427095 0.70427095 0.1912161 ]
-------------------------
{'degree': 0.11847780849885403, 'cluster': 0.22980444119400012, 'orbit': 0.014428668625674046}
| 07-01 17:07:54 MMD_full ego_18_small.pth 128: {'degree': 0.11847780849885403, 'cluster': 0.22980444119400012, 'orbit': 0.014428668625674046}
| 07-01 17:07:54 load dataset: ego_small
200
3
2
| 07-01 17:07:54 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.604484
{'degree': 0.13558617340199852}
Time computing clustering mmd:  0:00:32.010298
{'degree': 0.13558617340199852, 'cluster': 0.27811548137049796}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.7508308  1.81913831 0.90956915 0.3519272  1.73256749 1.73256749
 0.86004264 0.28668088 0.3024115  0.33573555 0.6714711  0.33573555
 0.12801734 0.12801734 0.03253699]
-------------------------
{'degree': 0.13558617340199852, 'cluster': 0.27811548137049796, 'orbit': 0.06463238992770659}
| 07-01 17:09:04 MMD_full ego_18_small.pth 128: {'degree': 0.13558617340199852, 'cluster': 0.27811548137049796, 'orbit': 0.06463238992770659}
| 07-01 17:09:04 load dataset: ego_small
200
3
2
| 07-01 17:09:04 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.671952
{'degree': 0.1013929569971046}
Time computing clustering mmd:  0:00:31.971708
{'degree': 0.1013929569971046, 'cluster': 0.2250870561460641}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[ 2.51597894  5.44027923  2.72013961  1.35637897  1.93739635  1.93739635
 12.84132422  4.28044141  1.29715427  1.62068827  3.24137653  1.62068827
  1.53493505  1.53493505  0.28510401]
-------------------------
{'degree': 0.1013929569971046, 'cluster': 0.2250870561460641, 'orbit': 0.020004051518311528}
| 07-01 17:10:16 MMD_full ego_18_small.pth 128: {'degree': 0.1013929569971046, 'cluster': 0.2250870561460641, 'orbit': 0.020004051518311528}
| 07-01 17:10:16 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:10:16 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.751244
{'degree': 0.10866374126976175}
Time computing clustering mmd:  0:00:32.059039
{'degree': 0.10866374126976175, 'cluster': 0.22483835720554668}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.84403685 2.12828341 1.0641417  0.47301364 2.28329447 2.28329447
 1.13657714 0.37885905 0.4818792  0.52774659 1.05549319 0.52774659
 0.24569739 0.24569739 0.05535641]
-------------------------
{'degree': 0.10866374126976175, 'cluster': 0.22483835720554668, 'orbit': 0.06142627923148525}
| 07-01 17:11:27 MMD_full ego_18_small.pth 128: {'degree': 0.10866374126976175, 'cluster': 0.22483835720554668, 'orbit': 0.06142627923148525}
| 07-01 17:11:27 epoch: 015| time: 0.5s| train loss: +1.649e+00 | test loss: +nan |
| 07-01 17:11:27 epoch: 015| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:11:27 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.643408
{'degree': 0.05684984247887903}
Time computing clustering mmd:  0:00:54.042796
{'degree': 0.05684984247887903, 'cluster': 0.12204479308510552}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[1.92118223 2.11765518 1.05882759 0.50012625 1.85506141 1.85506141
 1.03869717 0.34623239 0.29142644 0.43276133 0.86552266 0.43276133
 0.18218218 0.18218218 0.03271183]
-------------------------
{'degree': 0.05684984247887903, 'cluster': 0.12204479308510552, 'orbit': 0.02428130628498093}
| 07-01 17:13:05 MMD_full ego_18_small.pth 128: {'degree': 0.05684984247887903, 'cluster': 0.12204479308510552, 'orbit': 0.02428130628498093}
| 07-01 17:13:05 load dataset: ego_small
200
3
2
| 07-01 17:13:06 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.548543
{'degree': 0.07791384026283721}
Time computing clustering mmd:  0:00:31.830388
{'degree': 0.07791384026283721, 'cluster': 0.15835631198641698}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.96917938 2.27359683 1.13679841 0.55152683 2.00662944 2.00662944
 1.0525675  0.35085583 0.36953186 0.47673443 0.95346886 0.47673443
 0.20341126 0.20341126 0.05272941]
-------------------------
{'degree': 0.07791384026283721, 'cluster': 0.15835631198641698, 'orbit': 0.05988370665168663}
| 07-01 17:14:16 MMD_full ego_18_small.pth 128: {'degree': 0.07791384026283721, 'cluster': 0.15835631198641698, 'orbit': 0.05988370665168663}
| 07-01 17:14:16 load dataset: ego_small
200
3
2
| 07-01 17:14:16 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.612169
{'degree': 0.11023161964653871}
Time computing clustering mmd:  0:00:31.213417
{'degree': 0.11023161964653871, 'cluster': 0.2178228425538658}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.8062207  2.01372088 1.00686044 0.43088134 1.95576028 1.95576028
 1.06902029 0.3563401  0.35060067 0.43332853 0.86665707 0.43332853
 0.18297631 0.18297631 0.03059755]
-------------------------
{'degree': 0.11023161964653871, 'cluster': 0.2178228425538658, 'orbit': 0.061073528082390416}
| 07-01 17:15:26 MMD_full ego_18_small.pth 128: {'degree': 0.11023161964653871, 'cluster': 0.2178228425538658, 'orbit': 0.061073528082390416}
| 07-01 17:15:26 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:15:26 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.439536
{'degree': 0.07816222489807356}
Time computing clustering mmd:  0:00:31.560637
{'degree': 0.07816222489807356, 'cluster': 0.15924210327108834}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[2.01894791 2.49390669 1.24695335 0.60936282 2.47714899 2.47714899
 1.31446221 0.43815407 0.55205896 0.62690458 1.25380916 0.62690458
 0.30452463 0.30452463 0.0590049 ]
-------------------------
{'degree': 0.07816222489807356, 'cluster': 0.15924210327108834, 'orbit': 0.05743447602472207}
| 07-01 17:16:36 MMD_full ego_18_small.pth 128: {'degree': 0.07816222489807356, 'cluster': 0.15924210327108834, 'orbit': 0.05743447602472207}
| 07-01 17:16:37 epoch: 016| time: 0.5s| train loss: +1.609e+00 | test loss: +nan |
| 07-01 17:16:37 epoch: 016| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:16:37 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.455069
{'degree': 0.08695461217296274}
Time computing clustering mmd:  0:00:53.760579
{'degree': 0.08695461217296274, 'cluster': 0.16827574808310142}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.74471672 4.20575067 2.10287533 2.00554126 1.92238275 1.92238275
 4.04043161 1.34681054 0.78763136 1.58738858 3.17477717 1.58738858
 1.51156488 1.51156488 0.72589225]
...
[2.57717392 3.95899799 1.979499   1.80634194 3.05143863 3.05143863
 2.3409327  0.7803109  1.26042452 1.72344703 3.44689406 1.72344703
 2.10613769 2.10613769 0.94336605]
-------------------------
{'degree': 0.08695461217296274, 'cluster': 0.16827574808310142, 'orbit': 0.009319926294549141}
| 07-01 17:18:14 MMD_full ego_18_small.pth 128: {'degree': 0.08695461217296274, 'cluster': 0.16827574808310142, 'orbit': 0.009319926294549141}
| 07-01 17:18:14 load dataset: ego_small
200
3
2
| 07-01 17:18:14 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.341088
{'degree': 0.1509182461306291}
Time computing clustering mmd:  0:00:31.625999
{'degree': 0.1509182461306291, 'cluster': 0.25023834109962495}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.63473957 1.47578949 0.73789474 0.28195021 0.93425541 0.93425541
 0.71542735 0.23847578 0.16796754 0.19748184 0.39496367 0.19748184
 0.06285598 0.06285598 0.01299716]
-------------------------
{'degree': 0.1509182461306291, 'cluster': 0.25023834109962495, 'orbit': 0.06822343997450542}
| 07-01 17:19:24 MMD_full ego_18_small.pth 128: {'degree': 0.1509182461306291, 'cluster': 0.25023834109962495, 'orbit': 0.06822343997450542}
| 07-01 17:19:24 load dataset: ego_small
200
3
2
| 07-01 17:19:24 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.573528
{'degree': 0.12422303481891639}
Time computing clustering mmd:  0:00:31.184465
{'degree': 0.12422303481891639, 'cluster': 0.22982225621032593}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.74596699 1.80641356 0.90320678 0.28511286 1.62222296 1.62222296
 0.95301097 0.31767032 0.24966016 0.23676626 0.47353253 0.23676626
 0.05107846 0.05107846 0.01140873]
-------------------------
{'degree': 0.12422303481891639, 'cluster': 0.22982225621032593, 'orbit': 0.06477868917044471}
| 07-01 17:20:34 MMD_full ego_18_small.pth 128: {'degree': 0.12422303481891639, 'cluster': 0.22982225621032593, 'orbit': 0.06477868917044471}
| 07-01 17:20:34 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:20:34 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.385463
{'degree': 0.1484695737481303}
Time computing clustering mmd:  0:00:31.128070
{'degree': 0.1484695737481303, 'cluster': 0.27493244399958927}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[3.41999861 7.03813131 3.51906566 2.78821928 4.19579837 4.19579837
 8.27097985 2.75699328 2.98333333 2.76574675 5.53149351 2.76574675
 3.23300366 3.23300366 1.06090909]
...
[2.75294199 4.40301077 2.20150538 1.66836217 5.07808933 5.07808933
 2.4710708  0.82369027 2.13137778 2.13709346 4.27418692 2.13709346
 1.93313709 1.93313709 0.52368254]
-------------------------
{'degree': 0.1484695737481303, 'cluster': 0.27493244399958927, 'orbit': 0.05513706789285422}
| 07-01 17:21:43 MMD_full ego_18_small.pth 128: {'degree': 0.1484695737481303, 'cluster': 0.27493244399958927, 'orbit': 0.05513706789285422}
| 07-01 17:21:44 epoch: 017| time: 0.6s| train loss: +1.590e+00 | test loss: +nan |
| 07-01 17:21:44 epoch: 017| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:21:44 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.690664
{'degree': 0.05145286601857091}
Time computing clustering mmd:  0:00:53.635881
{'degree': 0.05145286601857091, 'cluster': 0.10876309458742006}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[2.43251095 3.97771829 1.98885914 1.24218597 1.98233557 1.98233557
 6.48532138 2.16177379 0.90652786 1.17356072 2.34712144 1.17356072
 1.11591509 1.11591509 0.37157209]
-------------------------
{'degree': 0.05145286601857091, 'cluster': 0.10876309458742006, 'orbit': 0.010750404450646345}
| 07-01 17:23:21 MMD_full ego_18_small.pth 128: {'degree': 0.05145286601857091, 'cluster': 0.10876309458742006, 'orbit': 0.010750404450646345}
| 07-01 17:23:21 load dataset: ego_small
200
3
2
| 07-01 17:23:21 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.519038
{'degree': 0.1076926887089884}
Time computing clustering mmd:  0:00:30.957983
{'degree': 0.1076926887089884, 'cluster': 0.18136993612314234}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.84143792 1.96107846 0.98053923 0.3726824  1.61491806 1.61491806
 0.97423405 0.32474468 0.2787555  0.27568633 0.55137266 0.27568633
 0.10212102 0.10212102 0.0078125 ]
-------------------------
{'degree': 0.1076926887089884, 'cluster': 0.18136993612314234, 'orbit': 0.06282747543447931}
| 07-01 17:24:31 MMD_full ego_18_small.pth 128: {'degree': 0.1076926887089884, 'cluster': 0.18136993612314234, 'orbit': 0.06282747543447931}
| 07-01 17:24:31 load dataset: ego_small
200
3
2
| 07-01 17:24:31 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.657262
{'degree': 0.103531554611626}
Time computing clustering mmd:  0:00:31.118833
{'degree': 0.103531554611626, 'cluster': 0.12931748614890093}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.88546431 1.85317162 0.92658581 0.44291125 1.34321524 1.34321524
 0.75165664 0.25055221 0.17689181 0.28409632 0.56819264 0.28409632
 0.11443153 0.11443153 0.01034035]
-------------------------
{'degree': 0.103531554611626, 'cluster': 0.12931748614890093, 'orbit': 0.06563051759472249}
| 07-01 17:25:41 MMD_full ego_18_small.pth 128: {'degree': 0.103531554611626, 'cluster': 0.12931748614890093, 'orbit': 0.06563051759472249}
| 07-01 17:25:41 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:25:41 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.593256
{'degree': 0.08271066432727192}
Time computing clustering mmd:  0:00:31.707166
{'degree': 0.08271066432727192, 'cluster': 0.1776726740535548}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.94516616 2.21047464 1.10523732 0.52232718 2.04837668 2.04837668
 1.16172167 0.38724056 0.37805693 0.40550854 0.81101708 0.40550854
 0.19869947 0.19869947 0.04228671]
-------------------------
{'degree': 0.08271066432727192, 'cluster': 0.1776726740535548, 'orbit': 0.05957827324819487}
| 07-01 17:26:51 MMD_full ego_18_small.pth 128: {'degree': 0.08271066432727192, 'cluster': 0.1776726740535548, 'orbit': 0.05957827324819487}
| 07-01 17:26:52 epoch: 018| time: 0.5s| train loss: +1.534e+00 | test loss: +nan |
| 07-01 17:26:52 epoch: 018| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:26:52 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.535111
{'degree': 0.09015241168499433}
Time computing clustering mmd:  0:00:53.569723
{'degree': 0.09015241168499433, 'cluster': 0.162022565133499}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.30644487 3.47152014 1.73576007 1.22932292 0.21940549 0.21940549
 6.19500722 2.06500241 0.06504329 0.8762452  1.75249041 0.8762452
 0.609809   0.609809   0.34997336]
...
[1.72433526 1.62381065 0.81190533 0.35643094 1.04662395 1.04662395
 0.81537993 0.27179331 0.15649221 0.2026857  0.40537141 0.2026857
 0.08788507 0.08788507 0.03409091]
-------------------------
{'degree': 0.09015241168499433, 'cluster': 0.162022565133499, 'orbit': 0.026062614059353173}
| 07-01 17:28:29 MMD_full ego_18_small.pth 128: {'degree': 0.09015241168499433, 'cluster': 0.162022565133499, 'orbit': 0.026062614059353173}
| 07-01 17:28:29 load dataset: ego_small
200
3
2
| 07-01 17:28:29 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.528120
{'degree': 0.1503861480984483}
Time computing clustering mmd:  0:00:30.934643
{'degree': 0.1503861480984483, 'cluster': 0.22960451742547616}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.69702459 1.45567527 0.72783764 0.35619998 0.90976857 0.90976857
 0.54568101 0.18189367 0.16478842 0.21400802 0.42801604 0.21400802
 0.10743709 0.10743709 0.01971535]
-------------------------
{'degree': 0.1503861480984483, 'cluster': 0.22960451742547616, 'orbit': 0.06946629202746002}
| 07-01 17:29:39 MMD_full ego_18_small.pth 128: {'degree': 0.1503861480984483, 'cluster': 0.22960451742547616, 'orbit': 0.06946629202746002}
| 07-01 17:29:39 load dataset: ego_small
200
3
2
| 07-01 17:29:39 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.392645
{'degree': 0.12805363376081424}
Time computing clustering mmd:  0:00:31.539561
{'degree': 0.12805363376081424, 'cluster': 0.2703344064488746}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 3.45144884  7.95445286  3.97722643  2.95982439  1.47377009  1.47377009
 21.32380996  7.10793665  1.64035088  3.6645451   7.32909021  3.6645451
  2.9813292   2.9813292   0.96160331]
...
[2.46667984 3.80245738 1.90122869 1.62590273 1.90857079 1.90857079
 5.24959895 1.74986632 0.333415   1.47062805 2.9412561  1.47062805
 1.5418877  1.5418877  0.92663139]
-------------------------
{'degree': 0.12805363376081424, 'cluster': 0.2703344064488746, 'orbit': 0.043854360641548906}
| 07-01 17:30:49 MMD_full ego_18_small.pth 128: {'degree': 0.12805363376081424, 'cluster': 0.2703344064488746, 'orbit': 0.043854360641548906}
| 07-01 17:30:49 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:30:49 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.582156
{'degree': 0.11239826511415996}
Time computing clustering mmd:  0:00:31.520901
{'degree': 0.11239826511415996, 'cluster': 0.2214548070153597}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.81171744 1.83780705 0.91890353 0.40201713 1.50600916 1.50600916
 0.90535589 0.3017853  0.22400082 0.29316835 0.58633671 0.29316835
 0.10351586 0.10351586 0.03650429]
-------------------------
{'degree': 0.11239826511415996, 'cluster': 0.2214548070153597, 'orbit': 0.0634647846702121}
| 07-01 17:31:58 MMD_full ego_18_small.pth 128: {'degree': 0.11239826511415996, 'cluster': 0.2214548070153597, 'orbit': 0.0634647846702121}
| 07-01 17:31:59 epoch: 019| time: 0.5s| train loss: +1.522e+00 | test loss: +nan |
| 07-01 17:31:59 epoch: 019| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:31:59 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.685366
{'degree': 0.053016783215801944}
Time computing clustering mmd:  0:00:53.883919
{'degree': 0.053016783215801944, 'cluster': 0.08537532742555892}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.50975051 3.98261696 1.99130848 1.51473142 0.88660991 0.88660991
 6.10339906 2.03446635 0.68358814 1.23234395 2.4646879  1.23234395
 0.97735716 0.97735716 0.43541606]
...
[1.99437008 2.05153028 1.02576514 0.6231696  1.54903183 1.54903183
 0.79061882 0.26353961 0.26770712 0.37882866 0.75765732 0.37882866
 0.22578381 0.22578381 0.05657468]
-------------------------
{'degree': 0.053016783215801944, 'cluster': 0.08537532742555892, 'orbit': 0.021644255901705378}
| 07-01 17:33:37 MMD_full ego_18_small.pth 128: {'degree': 0.053016783215801944, 'cluster': 0.08537532742555892, 'orbit': 0.021644255901705378}
| 07-01 17:33:37 load dataset: ego_small
200
3
2
| 07-01 17:33:37 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.536321
{'degree': 0.08888470324379139}
Time computing clustering mmd:  0:00:31.157607
{'degree': 0.08888470324379139, 'cluster': 0.13205814854093983}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.94545115 2.03858439 1.0192922  0.58377451 1.45660648 1.45660648
 0.87711763 0.29237254 0.21943109 0.4054831  0.81096621 0.4054831
 0.20372795 0.20372795 0.07541798]
-------------------------
{'degree': 0.08888470324379139, 'cluster': 0.13205814854093983, 'orbit': 0.06184758032644111}
| 07-01 17:34:47 MMD_full ego_18_small.pth 128: {'degree': 0.08888470324379139, 'cluster': 0.13205814854093983, 'orbit': 0.06184758032644111}
| 07-01 17:34:47 load dataset: ego_small
200
3
2
| 07-01 17:34:47 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.550246
{'degree': 0.09432675373534538}
Time computing clustering mmd:  0:00:31.703967
{'degree': 0.09432675373534538, 'cluster': 0.15402828792722018}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.95509848 2.05715213 1.02857607 0.58783034 1.79298109 1.79298109
 0.99386739 0.33128913 0.33813591 0.43974081 0.87948161 0.43974081
 0.21821791 0.21821791 0.07038909]
-------------------------
{'degree': 0.09432675373534538, 'cluster': 0.15402828792722018, 'orbit': 0.06046998986892116}
| 07-01 17:35:58 MMD_full ego_18_small.pth 128: {'degree': 0.09432675373534538, 'cluster': 0.15402828792722018, 'orbit': 0.06046998986892116}
| 07-01 17:35:58 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:35:58 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.555873
{'degree': 0.06684071663517699}
Time computing clustering mmd:  0:00:31.392397
{'degree': 0.06684071663517699, 'cluster': 0.13234153740346594}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.36740949 4.64978735 2.32489367 1.42978425 1.18417372 1.18417372
 9.29700431 3.09900144 1.64035088 1.34180147 2.68360295 1.34180147
 1.83059397 1.83059397 0.46124402]
...
[2.09310887 2.50727504 1.25363752 0.65748393 2.22674794 2.22674794
 1.26781579 0.42260526 0.45026463 0.54368021 1.08736042 0.54368021
 0.24623731 0.24623731 0.05561756]
-------------------------
{'degree': 0.06684071663517699, 'cluster': 0.13234153740346594, 'orbit': 0.0412122897034366}
| 07-01 17:37:08 MMD_full ego_18_small.pth 128: {'degree': 0.06684071663517699, 'cluster': 0.13234153740346594, 'orbit': 0.0412122897034366}
| 07-01 17:37:08 epoch: 020| time: 0.5s| train loss: +1.542e+00 | test loss: +nan |
| 07-01 17:37:08 epoch: 020| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:37:08 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
80 128
Time computing degree mmd:  0:00:04.423539
{'degree': 0.10312369252963816}
Time computing clustering mmd:  0:00:53.476062
{'degree': 0.10312369252963816, 'cluster': 0.13748275579605884}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[2.66524954 4.66055375 2.33027688 1.24925205 4.22814701 4.22814701
 5.6242088  1.87473627 1.13857312 1.32374638 2.64749277 1.32374638
 0.72125191 0.72125191 0.24085049]
...
[1.90632512 1.96111329 0.98055664 0.47623395 1.3605962  1.3605962
 0.97283387 0.32427796 0.27388508 0.37804598 0.75609197 0.37804598
 0.14747408 0.14747408 0.03177397]
-------------------------
{'degree': 0.10312369252963816, 'cluster': 0.13748275579605884, 'orbit': 0.010916793672854697}
| 07-01 17:38:46 MMD_full ego_18_small.pth 128: {'degree': 0.10312369252963816, 'cluster': 0.13748275579605884, 'orbit': 0.010916793672854697}
| 07-01 17:38:46 load dataset: ego_small
200
3
2
| 07-01 17:38:46 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.504865
{'degree': 0.15200262455937863}
Time computing clustering mmd:  0:00:30.949353
{'degree': 0.15200262455937863, 'cluster': 0.27865190938170875}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
error at orca
invalid literal for int() with base 10: ':'
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 3.27574484  6.81806723  3.40903361  2.11524064  3.3439012   3.3439012
 14.64264706  4.88088235  0.22352941  3.12023173  6.24046346  3.12023173
  1.35294118  1.35294118  0.65597148]
...
[2.1481378  2.75361134 1.37680567 0.61059107 0.88422866 0.88422866
 3.98018348 1.32672783 0.08849975 0.60796979 1.21593957 0.60796979
 0.23861424 0.23861424 0.03576751]
-------------------------
{'degree': 0.15200262455937863, 'cluster': 0.27865190938170875, 'orbit': 0.025338380862706344}
| 07-01 17:39:56 MMD_full ego_18_small.pth 128: {'degree': 0.15200262455937863, 'cluster': 0.27865190938170875, 'orbit': 0.025338380862706344}
| 07-01 17:39:56 load dataset: ego_small
200
3
2
| 07-01 17:39:56 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.486254
{'degree': 0.13451626027006047}
Time computing clustering mmd:  0:00:31.331530
{'degree': 0.13451626027006047, 'cluster': 0.23050505599207716}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.75188961 1.63508214 0.81754107 0.36570128 1.26887088 1.26887088
 0.71823897 0.23941299 0.2131268  0.23740151 0.47480302 0.23740151
 0.09260569 0.09260569 0.02320593]
-------------------------
{'degree': 0.13451626027006047, 'cluster': 0.23050505599207716, 'orbit': 0.06650888116371023}
| 07-01 17:41:06 MMD_full ego_18_small.pth 128: {'degree': 0.13451626027006047, 'cluster': 0.23050505599207716, 'orbit': 0.06650888116371023}
| 07-01 17:41:06 load dataset: ego_small
200
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:41:06 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
20 128
Time computing degree mmd:  0:00:02.402891
{'degree': 0.12978452657960693}
Time computing clustering mmd:  0:00:30.861718
{'degree': 0.12978452657960693, 'cluster': 0.27983013712810856}
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
w
evaluation/orca
e
r
t
i
-------------------------
[ 2.62151376  5.22563131  2.61281566  1.89617383  0.96738928  0.96738928
 10.18404804  3.39468268  1.55833333  1.74112554  3.48225108  1.74112554
  2.11330669  2.11330669  0.66242424]
...
[1.73477208 1.68620267 0.84310133 0.31238503 1.24034835 1.24034835
 0.74832911 0.24944304 0.20880542 0.20053142 0.40106283 0.20053142
 0.09853962 0.09853962 0.01910014]
-------------------------
{'degree': 0.12978452657960693, 'cluster': 0.27983013712810856, 'orbit': 0.06716248401109315}
| 07-01 17:42:15 MMD_full ego_18_small.pth 128: {'degree': 0.12978452657960693, 'cluster': 0.27983013712810856, 'orbit': 0.06716248401109315}
| 07-01 17:42:16 epoch: 021| time: 0.5s| train loss: +1.474e+00 | test loss: +nan |
| 07-01 17:42:16 epoch: 021| train loss i: nan test loss i: nan |
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/best'
22
3
2
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/main'
22
3
[Errno 21] Is a directory: 'exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/models/bestloss'
22
| 07-01 17:42:16 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
