| 07-01 16:50:22 EXPERIMENT BEGIN: 
| 07-01 16:50:22 logging into exp/gridsearch/edp-gnn_ego_18_small__Jul-01-16-50-22_124809/info.log
| 07-01 16:50:22 load dataset: ego_small
200
| 07-01 16:50:24 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:50:24 Parameters: 
gnn_list.0.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.0.weight ........................................... torch.Size([32, 3])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.5.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.5.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.5.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.6.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.6.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.6.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.0.weight .............................................. torch.Size([32, 6])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.4.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.4.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.4.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.5.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.5.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.5.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.translate_mlp.linears.0.weight .................................................................. torch.Size([4, 34])
gnn_list.0.translate_mlp.linears.0.bias ........................................................................ torch.Size([4])
gnn_list.0.translate_mlp.linears.1.weight ................................................................... torch.Size([4, 4])
gnn_list.0.translate_mlp.linears.1.bias ........................................................................ torch.Size([4])
gnn_list.0.translate_mlp.linears.2.weight ................................................................... torch.Size([2, 4])
gnn_list.0.translate_mlp.linears.2.bias ........................................................................ torch.Size([2])
gnn_list.0.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([4])
gnn_list.0.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([4])
gnn_list.0.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([4])
gnn_list.0.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([4])
gnn_list.0.translate_mlp.cond_layers.0.gain ............................................................. torch.Size([32, 1, 4])
gnn_list.0.translate_mlp.cond_layers.0.bias ............................................................. torch.Size([32, 1, 4])
gnn_list.0.translate_mlp.cond_layers.1.gain ............................................................. torch.Size([32, 1, 4])
gnn_list.0.translate_mlp.cond_layers.1.bias ............................................................. torch.Size([32, 1, 4])
gnn_list.1.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([36, 18])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.5.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.5.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.5.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.6.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.6.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.6.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([36, 36])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.4.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.4.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.4.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.5.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.5.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.5.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.translate_mlp.linears.0.weight .................................................................. torch.Size([8, 34])
gnn_list.1.translate_mlp.linears.0.bias ........................................................................ torch.Size([8])
gnn_list.1.translate_mlp.linears.1.weight ................................................................... torch.Size([8, 8])
gnn_list.1.translate_mlp.linears.1.bias ........................................................................ torch.Size([8])
gnn_list.1.translate_mlp.linears.2.weight ................................................................... torch.Size([4, 8])
gnn_list.1.translate_mlp.linears.2.bias ........................................................................ torch.Size([4])
gnn_list.1.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([8])
gnn_list.1.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([8])
gnn_list.1.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([8])
gnn_list.1.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([8])
gnn_list.1.translate_mlp.cond_layers.0.gain ............................................................. torch.Size([32, 1, 8])
gnn_list.1.translate_mlp.cond_layers.0.bias ............................................................. torch.Size([32, 1, 8])
gnn_list.1.translate_mlp.cond_layers.1.gain ............................................................. torch.Size([32, 1, 8])
gnn_list.1.translate_mlp.cond_layers.1.bias ............................................................. torch.Size([32, 1, 8])
gnn_list.2.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([40, 20])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.linear_prediction.5.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.5.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.5.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.linear_prediction.6.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.6.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.6.2.weight .......................................... torch.Size([32, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([32])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([40, 80])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.4.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.4.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.4.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.5.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.5.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.5.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.translate_mlp.linears.0.weight ................................................................. torch.Size([16, 68])
gnn_list.2.translate_mlp.linears.0.bias ....................................................................... torch.Size([16])
gnn_list.2.translate_mlp.linears.1.weight ................................................................. torch.Size([16, 16])
gnn_list.2.translate_mlp.linears.1.bias ....................................................................... torch.Size([16])
gnn_list.2.translate_mlp.linears.2.weight .................................................................. torch.Size([8, 16])
gnn_list.2.translate_mlp.linears.2.bias ........................................................................ torch.Size([8])
gnn_list.2.translate_mlp.batch_norms.0.weight ................................................................. torch.Size([16])
gnn_list.2.translate_mlp.batch_norms.0.bias ................................................................... torch.Size([16])
gnn_list.2.translate_mlp.batch_norms.1.weight ................................................................. torch.Size([16])
gnn_list.2.translate_mlp.batch_norms.1.bias ................................................................... torch.Size([16])
gnn_list.2.translate_mlp.cond_layers.0.gain ............................................................ torch.Size([32, 1, 16])
gnn_list.2.translate_mlp.cond_layers.0.bias ............................................................ torch.Size([32, 1, 16])
gnn_list.2.translate_mlp.cond_layers.1.gain ............................................................ torch.Size([32, 1, 16])
gnn_list.2.translate_mlp.cond_layers.1.bias ............................................................ torch.Size([32, 1, 16])
gnn_list.3.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([80, 40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([80, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([80, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([80, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([80, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.linear_prediction.5.0.weight .......................................... torch.Size([80, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.5.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.5.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.linear_prediction.6.0.weight .......................................... torch.Size([80, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.6.0.bias ................................................ torch.Size([80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.6.2.weight .......................................... torch.Size([64, 80])
gnn_list.3.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([64])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.0.weight ............................................ torch.Size([80, 320])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([80])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([80])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([80])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([80])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.4.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.3.multi_channel_gnn_module.layers.4.linears.0.bias ................................................... torch.Size([80])
gnn_list.3.multi_channel_gnn_module.layers.4.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.3.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.5.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.3.multi_channel_gnn_module.layers.5.linears.0.bias ................................................... torch.Size([80])
gnn_list.3.multi_channel_gnn_module.layers.5.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.3.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.translate_mlp.linears.0.weight ................................................................ torch.Size([32, 136])
gnn_list.3.translate_mlp.linears.0.bias ....................................................................... torch.Size([32])
gnn_list.3.translate_mlp.linears.1.weight ................................................................. torch.Size([32, 32])
gnn_list.3.translate_mlp.linears.1.bias ....................................................................... torch.Size([32])
gnn_list.3.translate_mlp.linears.2.weight ................................................................. torch.Size([16, 32])
gnn_list.3.translate_mlp.linears.2.bias ....................................................................... torch.Size([16])
gnn_list.3.translate_mlp.batch_norms.0.weight ................................................................. torch.Size([32])
gnn_list.3.translate_mlp.batch_norms.0.bias ................................................................... torch.Size([32])
gnn_list.3.translate_mlp.batch_norms.1.weight ................................................................. torch.Size([32])
gnn_list.3.translate_mlp.batch_norms.1.bias ................................................................... torch.Size([32])
gnn_list.3.translate_mlp.cond_layers.0.gain ............................................................ torch.Size([32, 1, 32])
gnn_list.3.translate_mlp.cond_layers.0.bias ............................................................ torch.Size([32, 1, 32])
gnn_list.3.translate_mlp.cond_layers.1.gain ............................................................ torch.Size([32, 1, 32])
gnn_list.3.translate_mlp.cond_layers.1.bias ............................................................ torch.Size([32, 1, 32])
gnn_list.4.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.0.weight ......................................... torch.Size([160, 80])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.0.weight ......................................... torch.Size([160, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.0.weight ......................................... torch.Size([160, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.0.weight ......................................... torch.Size([160, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.0.weight ......................................... torch.Size([160, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.linear_prediction.5.0.weight ......................................... torch.Size([160, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.5.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.5.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.linear_prediction.6.0.weight ......................................... torch.Size([160, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.6.0.bias ............................................... torch.Size([160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.6.2.weight ......................................... torch.Size([64, 160])
gnn_list.4.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([64])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.0.weight .......................................... torch.Size([160, 1280])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.0.bias .................................................. torch.Size([160])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.0.bias .................................................. torch.Size([160])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.0.bias .................................................. torch.Size([160])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.0.bias .................................................. torch.Size([160])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.4.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.4.multi_channel_gnn_module.layers.4.linears.0.bias .................................................. torch.Size([160])
gnn_list.4.multi_channel_gnn_module.layers.4.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.4.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.5.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.4.multi_channel_gnn_module.layers.5.linears.0.bias .................................................. torch.Size([160])
gnn_list.4.multi_channel_gnn_module.layers.5.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.4.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.translate_mlp.linears.0.weight ................................................................ torch.Size([32, 144])
gnn_list.4.translate_mlp.linears.0.bias ....................................................................... torch.Size([32])
gnn_list.4.translate_mlp.linears.1.weight ................................................................. torch.Size([32, 32])
gnn_list.4.translate_mlp.linears.1.bias ....................................................................... torch.Size([32])
gnn_list.4.translate_mlp.linears.2.weight ................................................................. torch.Size([16, 32])
gnn_list.4.translate_mlp.linears.2.bias ....................................................................... torch.Size([16])
gnn_list.4.translate_mlp.batch_norms.0.weight ................................................................. torch.Size([32])
gnn_list.4.translate_mlp.batch_norms.0.bias ................................................................... torch.Size([32])
gnn_list.4.translate_mlp.batch_norms.1.weight ................................................................. torch.Size([32])
gnn_list.4.translate_mlp.batch_norms.1.bias ................................................................... torch.Size([32])
gnn_list.4.translate_mlp.cond_layers.0.gain ............................................................ torch.Size([32, 1, 32])
gnn_list.4.translate_mlp.cond_layers.0.bias ............................................................ torch.Size([32, 1, 32])
gnn_list.4.translate_mlp.cond_layers.1.gain ............................................................ torch.Size([32, 1, 32])
gnn_list.4.translate_mlp.cond_layers.1.bias ............................................................ torch.Size([32, 1, 32])
gnn_list.5.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.5.multi_channel_gnn_module.linear_prediction.0.0.weight ......................................... torch.Size([160, 80])
gnn_list.5.multi_channel_gnn_module.linear_prediction.0.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.0.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.linear_prediction.1.0.weight ......................................... torch.Size([160, 16])
gnn_list.5.multi_channel_gnn_module.linear_prediction.1.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.1.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.linear_prediction.2.0.weight ......................................... torch.Size([160, 16])
gnn_list.5.multi_channel_gnn_module.linear_prediction.2.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.2.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.linear_prediction.3.0.weight ......................................... torch.Size([160, 16])
gnn_list.5.multi_channel_gnn_module.linear_prediction.3.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.3.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.linear_prediction.4.0.weight ......................................... torch.Size([160, 16])
gnn_list.5.multi_channel_gnn_module.linear_prediction.4.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.4.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.linear_prediction.5.0.weight ......................................... torch.Size([160, 16])
gnn_list.5.multi_channel_gnn_module.linear_prediction.5.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.5.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.linear_prediction.6.0.weight ......................................... torch.Size([160, 16])
gnn_list.5.multi_channel_gnn_module.linear_prediction.6.0.bias ............................................... torch.Size([160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.6.2.weight ......................................... torch.Size([32, 160])
gnn_list.5.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([32])
gnn_list.5.multi_channel_gnn_module.layers.0.linears.0.weight .......................................... torch.Size([160, 1280])
gnn_list.5.multi_channel_gnn_module.layers.0.linears.0.bias .................................................. torch.Size([160])
gnn_list.5.multi_channel_gnn_module.layers.0.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.5.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.5.multi_channel_gnn_module.layers.1.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.5.multi_channel_gnn_module.layers.1.linears.0.bias .................................................. torch.Size([160])
gnn_list.5.multi_channel_gnn_module.layers.1.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.5.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.5.multi_channel_gnn_module.layers.2.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.5.multi_channel_gnn_module.layers.2.linears.0.bias .................................................. torch.Size([160])
gnn_list.5.multi_channel_gnn_module.layers.2.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.5.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.5.multi_channel_gnn_module.layers.3.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.5.multi_channel_gnn_module.layers.3.linears.0.bias .................................................. torch.Size([160])
gnn_list.5.multi_channel_gnn_module.layers.3.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.5.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.5.multi_channel_gnn_module.layers.4.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.5.multi_channel_gnn_module.layers.4.linears.0.bias .................................................. torch.Size([160])
gnn_list.5.multi_channel_gnn_module.layers.4.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.5.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.5.multi_channel_gnn_module.layers.5.linears.0.weight ........................................... torch.Size([160, 256])
gnn_list.5.multi_channel_gnn_module.layers.5.linears.0.bias .................................................. torch.Size([160])
gnn_list.5.multi_channel_gnn_module.layers.5.linears.1.weight ............................................ torch.Size([16, 160])
gnn_list.5.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.5.translate_mlp.linears.0.weight ................................................................. torch.Size([32, 80])
gnn_list.5.translate_mlp.linears.0.bias ....................................................................... torch.Size([32])
gnn_list.5.translate_mlp.linears.1.weight ................................................................. torch.Size([32, 32])
gnn_list.5.translate_mlp.linears.1.bias ....................................................................... torch.Size([32])
gnn_list.5.translate_mlp.linears.2.weight .................................................................. torch.Size([8, 32])
gnn_list.5.translate_mlp.linears.2.bias ........................................................................ torch.Size([8])
gnn_list.5.translate_mlp.batch_norms.0.weight ................................................................. torch.Size([32])
gnn_list.5.translate_mlp.batch_norms.0.bias ................................................................... torch.Size([32])
gnn_list.5.translate_mlp.batch_norms.1.weight ................................................................. torch.Size([32])
gnn_list.5.translate_mlp.batch_norms.1.bias ................................................................... torch.Size([32])
gnn_list.5.translate_mlp.cond_layers.0.gain ............................................................ torch.Size([32, 1, 32])
gnn_list.5.translate_mlp.cond_layers.0.bias ............................................................ torch.Size([32, 1, 32])
gnn_list.5.translate_mlp.cond_layers.1.gain ............................................................ torch.Size([32, 1, 32])
gnn_list.5.translate_mlp.cond_layers.1.bias ............................................................ torch.Size([32, 1, 32])
gnn_list.6.multi_channel_gnn_module.eps ........................................................................ torch.Size([6])
gnn_list.6.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([80, 40])
gnn_list.6.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([80, 16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([80, 16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([80, 16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([80, 16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.5.0.weight .......................................... torch.Size([80, 16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.5.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.5.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.5.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.6.0.weight .......................................... torch.Size([80, 16])
gnn_list.6.multi_channel_gnn_module.linear_prediction.6.0.bias ................................................ torch.Size([80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.6.2.weight .......................................... torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.linear_prediction.6.2.bias ................................................ torch.Size([16])
gnn_list.6.multi_channel_gnn_module.layers.0.linears.0.weight ............................................ torch.Size([80, 320])
gnn_list.6.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([80])
gnn_list.6.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.6.multi_channel_gnn_module.layers.1.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.6.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([80])
gnn_list.6.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.6.multi_channel_gnn_module.layers.2.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.6.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([80])
gnn_list.6.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.6.multi_channel_gnn_module.layers.3.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.6.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([80])
gnn_list.6.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.6.multi_channel_gnn_module.layers.4.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.6.multi_channel_gnn_module.layers.4.linears.0.bias ................................................... torch.Size([80])
gnn_list.6.multi_channel_gnn_module.layers.4.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.layers.4.linears.1.bias ................................................... torch.Size([16])
gnn_list.6.multi_channel_gnn_module.layers.5.linears.0.weight ............................................ torch.Size([80, 128])
gnn_list.6.multi_channel_gnn_module.layers.5.linears.0.bias ................................................... torch.Size([80])
gnn_list.6.multi_channel_gnn_module.layers.5.linears.1.weight ............................................. torch.Size([16, 80])
gnn_list.6.multi_channel_gnn_module.layers.5.linears.1.bias ................................................... torch.Size([16])
gnn_list.6.translate_mlp.linears.0.weight ................................................................. torch.Size([16, 40])
gnn_list.6.translate_mlp.linears.0.bias ....................................................................... torch.Size([16])
gnn_list.6.translate_mlp.linears.1.weight ................................................................. torch.Size([16, 16])
gnn_list.6.translate_mlp.linears.1.bias ....................................................................... torch.Size([16])
gnn_list.6.translate_mlp.linears.2.weight .................................................................. torch.Size([4, 16])
gnn_list.6.translate_mlp.linears.2.bias ........................................................................ torch.Size([4])
gnn_list.6.translate_mlp.batch_norms.0.weight ................................................................. torch.Size([16])
gnn_list.6.translate_mlp.batch_norms.0.bias ................................................................... torch.Size([16])
gnn_list.6.translate_mlp.batch_norms.1.weight ................................................................. torch.Size([16])
gnn_list.6.translate_mlp.batch_norms.1.bias ................................................................... torch.Size([16])
gnn_list.6.translate_mlp.cond_layers.0.gain ............................................................ torch.Size([32, 1, 16])
gnn_list.6.translate_mlp.cond_layers.0.bias ............................................................ torch.Size([32, 1, 16])
gnn_list.6.translate_mlp.cond_layers.1.gain ............................................................ torch.Size([32, 1, 16])
gnn_list.6.translate_mlp.cond_layers.1.bias ............................................................ torch.Size([32, 1, 16])
final_read_score.linears.0.weight ........................................................................ torch.Size([120, 60])
final_read_score.linears.0.bias .............................................................................. torch.Size([120])
final_read_score.linears.1.weight ....................................................................... torch.Size([120, 120])
final_read_score.linears.1.bias .............................................................................. torch.Size([120])
final_read_score.linears.2.weight ......................................................................... torch.Size([1, 120])
final_read_score.linears.2.bias ................................................................................ torch.Size([1])
final_read_score.cond_layers.0.gain ................................................................... torch.Size([32, 1, 120])
final_read_score.cond_layers.0.bias ................................................................... torch.Size([32, 1, 120])
final_read_score.cond_layers.1.gain ................................................................... torch.Size([32, 1, 120])
final_read_score.cond_layers.1.bias ................................................................... torch.Size([32, 1, 120])
| 07-01 16:50:24 Parameters Count: 1401513, Trainable: 1401513
| 07-01 16:50:31 [0.0, 0.015625, 0.03125, 0.046875, 0.0625, 0.078125, 0.09375, 0.109375, 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375, 0.25, 0.265625, 0.28125, 0.296875, 0.3125, 0.328125, 0.34375, 0.359375, 0.375, 0.390625, 0.40625, 0.421875, 0.4375, 0.453125, 0.46875, 0.484375, 0.5], 0.0
| 07-01 16:50:32 epoch: 000| time: 1.0s| train loss: +1.219e+01 | test loss: +nan | 
| 07-01 16:50:32 epoch: 000| train loss i: nan test loss i: nan | 
| 07-01 16:50:32 epoch: 001| time: 0.5s| train loss: +1.065e+01 | test loss: +nan | 
| 07-01 16:50:32 epoch: 001| train loss i: nan test loss i: nan | 
| 07-01 16:50:33 epoch: 002| time: 0.5s| train loss: +9.446e+00 | test loss: +nan | 
| 07-01 16:50:33 epoch: 002| train loss i: nan test loss i: nan | 
| 07-01 16:50:33 epoch: 003| time: 0.5s| train loss: +8.353e+00 | test loss: +nan | 
| 07-01 16:50:33 epoch: 003| train loss i: nan test loss i: nan | 
| 07-01 16:50:34 epoch: 004| time: 0.5s| train loss: +7.230e+00 | test loss: +nan | 
| 07-01 16:50:34 epoch: 004| train loss i: nan test loss i: nan | 
| 07-01 16:50:35 epoch: 005| time: 0.5s| train loss: +6.161e+00 | test loss: +nan | 
| 07-01 16:50:35 epoch: 005| train loss i: nan test loss i: nan | 
| 07-01 16:50:35 epoch: 006| time: 0.5s| train loss: +5.127e+00 | test loss: +nan | 
| 07-01 16:50:35 epoch: 006| train loss i: nan test loss i: nan | 
| 07-01 16:50:36 epoch: 007| time: 0.5s| train loss: +4.229e+00 | test loss: +nan | 
| 07-01 16:50:36 epoch: 007| train loss i: nan test loss i: nan | 
| 07-01 16:50:36 epoch: 008| time: 0.5s| train loss: +3.490e+00 | test loss: +nan | 
| 07-01 16:50:36 epoch: 008| train loss i: nan test loss i: nan | 
| 07-01 16:50:37 epoch: 009| time: 0.5s| train loss: +2.870e+00 | test loss: +nan | 
| 07-01 16:50:37 epoch: 009| train loss i: nan test loss i: nan | 
| 07-01 16:50:37 epoch: 010| time: 0.5s| train loss: +2.457e+00 | test loss: +nan | 
| 07-01 16:50:37 epoch: 010| train loss i: nan test loss i: nan | 
| 07-01 16:50:38 epoch: 011| time: 0.5s| train loss: +2.121e+00 | test loss: +nan | 
| 07-01 16:50:38 epoch: 011| train loss i: nan test loss i: nan | 
| 07-01 16:50:38 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:52:18 MMD_full ego_18_small.pth 128: {'degree': 0.0339706896994989, 'cluster': 0.259400176467151, 'orbit': 0.026539066928104482}
| 07-01 16:52:18 load dataset: ego_small
200
| 07-01 16:52:18 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:53:29 MMD_full ego_18_small.pth 128: {'degree': 0.05166899025472782, 'cluster': 0.25072011844507647, 'orbit': 0.05121195351322916}
| 07-01 16:53:29 load dataset: ego_small
200
| 07-01 16:53:29 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:54:40 MMD_full ego_18_small.pth 128: {'degree': 0.0505025256402869, 'cluster': 0.23806806861549834, 'orbit': 0.0568142880391207}
| 07-01 16:54:40 load dataset: ego_small
200
| 07-01 16:54:40 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:55:51 MMD_full ego_18_small.pth 128: {'degree': 0.06587849754432562, 'cluster': 0.23021205238107528, 'orbit': 0.05257850515757645}
| 07-01 16:55:51 epoch: 012| time: 0.5s| train loss: +1.912e+00 | test loss: +nan | 
| 07-01 16:55:51 epoch: 012| train loss i: nan test loss i: nan | 
| 07-01 16:55:52 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:57:30 MMD_full ego_18_small.pth 128: {'degree': 0.06569366254892373, 'cluster': 0.2450952366212451, 'orbit': 0.024442930558431053}
| 07-01 16:57:30 load dataset: ego_small
200
| 07-01 16:57:30 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:58:41 MMD_full ego_18_small.pth 128: {'degree': 0.06600883342674835, 'cluster': 0.251676322557589, 'orbit': 0.05810868870473396}
| 07-01 16:58:41 load dataset: ego_small
200
| 07-01 16:58:41 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 16:59:52 MMD_full ego_18_small.pth 128: {'degree': 0.09769088968981166, 'cluster': 0.24350733386932583, 'orbit': 0.05726570108698481}
| 07-01 16:59:52 load dataset: ego_small
200
| 07-01 16:59:52 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:01:02 MMD_full ego_18_small.pth 128: {'degree': 0.07855063207640844, 'cluster': 0.2265403492196117, 'orbit': 0.011085238602220437}
| 07-01 17:01:03 epoch: 013| time: 0.5s| train loss: +1.771e+00 | test loss: +nan | 
| 07-01 17:01:03 epoch: 013| train loss i: nan test loss i: nan | 
| 07-01 17:01:03 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:02:42 MMD_full ego_18_small.pth 128: {'degree': 0.07620537054837229, 'cluster': 0.16059359850671578, 'orbit': 0.014424298173498329}
| 07-01 17:02:42 load dataset: ego_small
200
| 07-01 17:02:42 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:03:52 MMD_full ego_18_small.pth 128: {'degree': 0.10213597474640834, 'cluster': 0.2810624301374409, 'orbit': 0.06077563370840755}
| 07-01 17:03:52 load dataset: ego_small
200
| 07-01 17:03:53 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:05:04 MMD_full ego_18_small.pth 128: {'degree': 0.10127583167517473, 'cluster': 0.23190831695685393, 'orbit': 0.058669263032720576}
| 07-01 17:05:04 load dataset: ego_small
200
| 07-01 17:05:04 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:06:14 MMD_full ego_18_small.pth 128: {'degree': 0.06719170709626798, 'cluster': 0.23631048213557393, 'orbit': 0.05758035486964608}
| 07-01 17:06:15 epoch: 014| time: 0.5s| train loss: +1.706e+00 | test loss: +nan | 
| 07-01 17:06:15 epoch: 014| train loss i: nan test loss i: nan | 
| 07-01 17:06:15 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:07:54 MMD_full ego_18_small.pth 128: {'degree': 0.11847780849885403, 'cluster': 0.22980444119400012, 'orbit': 0.014428668625674046}
| 07-01 17:07:54 load dataset: ego_small
200
| 07-01 17:07:54 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:09:04 MMD_full ego_18_small.pth 128: {'degree': 0.13558617340199852, 'cluster': 0.27811548137049796, 'orbit': 0.06463238992770659}
| 07-01 17:09:04 load dataset: ego_small
200
| 07-01 17:09:04 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:10:16 MMD_full ego_18_small.pth 128: {'degree': 0.1013929569971046, 'cluster': 0.2250870561460641, 'orbit': 0.020004051518311528}
| 07-01 17:10:16 load dataset: ego_small
200
| 07-01 17:10:16 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:11:27 MMD_full ego_18_small.pth 128: {'degree': 0.10866374126976175, 'cluster': 0.22483835720554668, 'orbit': 0.06142627923148525}
| 07-01 17:11:27 epoch: 015| time: 0.5s| train loss: +1.649e+00 | test loss: +nan | 
| 07-01 17:11:27 epoch: 015| train loss i: nan test loss i: nan | 
| 07-01 17:11:27 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:13:05 MMD_full ego_18_small.pth 128: {'degree': 0.05684984247887903, 'cluster': 0.12204479308510552, 'orbit': 0.02428130628498093}
| 07-01 17:13:05 load dataset: ego_small
200
| 07-01 17:13:06 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:14:16 MMD_full ego_18_small.pth 128: {'degree': 0.07791384026283721, 'cluster': 0.15835631198641698, 'orbit': 0.05988370665168663}
| 07-01 17:14:16 load dataset: ego_small
200
| 07-01 17:14:16 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:15:26 MMD_full ego_18_small.pth 128: {'degree': 0.11023161964653871, 'cluster': 0.2178228425538658, 'orbit': 0.061073528082390416}
| 07-01 17:15:26 load dataset: ego_small
200
| 07-01 17:15:26 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:16:36 MMD_full ego_18_small.pth 128: {'degree': 0.07816222489807356, 'cluster': 0.15924210327108834, 'orbit': 0.05743447602472207}
| 07-01 17:16:37 epoch: 016| time: 0.5s| train loss: +1.609e+00 | test loss: +nan | 
| 07-01 17:16:37 epoch: 016| train loss i: nan test loss i: nan | 
| 07-01 17:16:37 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:18:14 MMD_full ego_18_small.pth 128: {'degree': 0.08695461217296274, 'cluster': 0.16827574808310142, 'orbit': 0.009319926294549141}
| 07-01 17:18:14 load dataset: ego_small
200
| 07-01 17:18:14 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:19:24 MMD_full ego_18_small.pth 128: {'degree': 0.1509182461306291, 'cluster': 0.25023834109962495, 'orbit': 0.06822343997450542}
| 07-01 17:19:24 load dataset: ego_small
200
| 07-01 17:19:24 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:20:34 MMD_full ego_18_small.pth 128: {'degree': 0.12422303481891639, 'cluster': 0.22982225621032593, 'orbit': 0.06477868917044471}
| 07-01 17:20:34 load dataset: ego_small
200
| 07-01 17:20:34 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:21:43 MMD_full ego_18_small.pth 128: {'degree': 0.1484695737481303, 'cluster': 0.27493244399958927, 'orbit': 0.05513706789285422}
| 07-01 17:21:44 epoch: 017| time: 0.6s| train loss: +1.590e+00 | test loss: +nan | 
| 07-01 17:21:44 epoch: 017| train loss i: nan test loss i: nan | 
| 07-01 17:21:44 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:23:21 MMD_full ego_18_small.pth 128: {'degree': 0.05145286601857091, 'cluster': 0.10876309458742006, 'orbit': 0.010750404450646345}
| 07-01 17:23:21 load dataset: ego_small
200
| 07-01 17:23:21 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:24:31 MMD_full ego_18_small.pth 128: {'degree': 0.1076926887089884, 'cluster': 0.18136993612314234, 'orbit': 0.06282747543447931}
| 07-01 17:24:31 load dataset: ego_small
200
| 07-01 17:24:31 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:25:41 MMD_full ego_18_small.pth 128: {'degree': 0.103531554611626, 'cluster': 0.12931748614890093, 'orbit': 0.06563051759472249}
| 07-01 17:25:41 load dataset: ego_small
200
| 07-01 17:25:41 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:26:51 MMD_full ego_18_small.pth 128: {'degree': 0.08271066432727192, 'cluster': 0.1776726740535548, 'orbit': 0.05957827324819487}
| 07-01 17:26:52 epoch: 018| time: 0.5s| train loss: +1.534e+00 | test loss: +nan | 
| 07-01 17:26:52 epoch: 018| train loss i: nan test loss i: nan | 
| 07-01 17:26:52 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:28:29 MMD_full ego_18_small.pth 128: {'degree': 0.09015241168499433, 'cluster': 0.162022565133499, 'orbit': 0.026062614059353173}
| 07-01 17:28:29 load dataset: ego_small
200
| 07-01 17:28:29 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:29:39 MMD_full ego_18_small.pth 128: {'degree': 0.1503861480984483, 'cluster': 0.22960451742547616, 'orbit': 0.06946629202746002}
| 07-01 17:29:39 load dataset: ego_small
200
| 07-01 17:29:39 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:30:49 MMD_full ego_18_small.pth 128: {'degree': 0.12805363376081424, 'cluster': 0.2703344064488746, 'orbit': 0.043854360641548906}
| 07-01 17:30:49 load dataset: ego_small
200
| 07-01 17:30:49 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:31:58 MMD_full ego_18_small.pth 128: {'degree': 0.11239826511415996, 'cluster': 0.2214548070153597, 'orbit': 0.0634647846702121}
| 07-01 17:31:59 epoch: 019| time: 0.5s| train loss: +1.522e+00 | test loss: +nan | 
| 07-01 17:31:59 epoch: 019| train loss i: nan test loss i: nan | 
| 07-01 17:31:59 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:33:37 MMD_full ego_18_small.pth 128: {'degree': 0.053016783215801944, 'cluster': 0.08537532742555892, 'orbit': 0.021644255901705378}
| 07-01 17:33:37 load dataset: ego_small
200
| 07-01 17:33:37 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:34:47 MMD_full ego_18_small.pth 128: {'degree': 0.08888470324379139, 'cluster': 0.13205814854093983, 'orbit': 0.06184758032644111}
| 07-01 17:34:47 load dataset: ego_small
200
| 07-01 17:34:47 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:35:58 MMD_full ego_18_small.pth 128: {'degree': 0.09432675373534538, 'cluster': 0.15402828792722018, 'orbit': 0.06046998986892116}
| 07-01 17:35:58 load dataset: ego_small
200
| 07-01 17:35:58 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:37:08 MMD_full ego_18_small.pth 128: {'degree': 0.06684071663517699, 'cluster': 0.13234153740346594, 'orbit': 0.0412122897034366}
| 07-01 17:37:08 epoch: 020| time: 0.5s| train loss: +1.542e+00 | test loss: +nan | 
| 07-01 17:37:08 epoch: 020| train loss i: nan test loss i: nan | 
| 07-01 17:37:08 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:38:46 MMD_full ego_18_small.pth 128: {'degree': 0.10312369252963816, 'cluster': 0.13748275579605884, 'orbit': 0.010916793672854697}
| 07-01 17:38:46 load dataset: ego_small
200
| 07-01 17:38:46 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:39:56 MMD_full ego_18_small.pth 128: {'degree': 0.15200262455937863, 'cluster': 0.27865190938170875, 'orbit': 0.025338380862706344}
| 07-01 17:39:56 load dataset: ego_small
200
| 07-01 17:39:56 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:41:06 MMD_full ego_18_small.pth 128: {'degree': 0.13451626027006047, 'cluster': 0.23050505599207716, 'orbit': 0.06650888116371023}
| 07-01 17:41:06 load dataset: ego_small
200
| 07-01 17:41:06 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 07-01 17:42:15 MMD_full ego_18_small.pth 128: {'degree': 0.12978452657960693, 'cluster': 0.27983013712810856, 'orbit': 0.06716248401109315}
| 07-01 17:42:16 epoch: 021| time: 0.5s| train loss: +1.474e+00 | test loss: +nan | 
| 07-01 17:42:16 epoch: 021| train loss i: nan test loss i: nan | 
| 07-01 17:42:16 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=3, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=6, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=68, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=136, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=64, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=144, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=16, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (5): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=160, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=160, out_features=32, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=1280, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=256, out_features=160, bias=True)
              (1): Linear(in_features=160, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=80, out_features=32, bias=True)
          (1): Linear(in_features=32, out_features=32, bias=True)
          (2): Linear(in_features=32, out_features=8, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (6): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=40, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (5): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
          (6): Sequential(
            (0): Linear(in_features=16, out_features=80, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=80, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=320, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (4): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
          (5): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=128, out_features=80, bias=True)
              (1): Linear(in_features=80, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=40, out_features=16, bias=True)
          (1): Linear(in_features=16, out_features=16, bias=True)
          (2): Linear(in_features=16, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=60, out_features=120, bias=True)
      (1): Linear(in_features=120, out_features=120, bias=True)
      (2): Linear(in_features=120, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
